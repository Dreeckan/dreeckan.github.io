(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{398:function(e,s,t){"use strict";t.r(s);var i=t(31),r=Object(i.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"enregistrer-des-changements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enregistrer-des-changements"}},[e._v("#")]),e._v(" Enregistrer des changements")]),e._v(" "),t("h2",{attrs:{id:"status-voir-l-etat-du-depot-local"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#status-voir-l-etat-du-depot-local"}},[e._v("#")]),e._v(" Status - Voir l'état du dépôt local")]),e._v(" "),t("p",[e._v("En vidéo :")]),e._v(" "),t("div",{staticStyle:{position:"relative","padding-bottom":"56.25%",height:"0"}},[t("iframe",{staticStyle:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"},attrs:{src:"https://www.loom.com/embed/14f386d48da142d5bcc2f27a85fd691c",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:""}})]),e._v(" "),t("p",[t("code",[e._v("git status")]),e._v(" :")]),e._v(" "),t("p",[e._v("Cette commande nous permet de voir les modifications depuis la dernière version enregistrée (le dernier commit). On peut y voir les fichiers créés, modifiés ou supprimés, et s'ils sont en attente de validation ou non (ajoutés à l'index, ou non).")]),e._v(" "),t("h2",{attrs:{id:"diff-voir-les-modifications-en-attente"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#diff-voir-les-modifications-en-attente"}},[e._v("#")]),e._v(" Diff - Voir les modifications en attente")]),e._v(" "),t("p",[e._v("En vidéo :")]),e._v(" "),t("div",{staticStyle:{position:"relative","padding-bottom":"56.25%",height:"0"}},[t("iframe",{staticStyle:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"},attrs:{src:"https://www.loom.com/embed/b285ee8b7aac487e8e37ebb17179f73e",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:""}})]),e._v(" "),t("p",[t("code",[e._v("git diff")]),e._v(" affiche l'ensemble des modifications sur les fichiers déjà versionnés par Git. Cette commande présente tous les fichiers modifiés et les changements à l'intérieur (les lignes commençant par "),t("code",[e._v("+")]),e._v(" sont ajoutées, celles commençant par "),t("code",[e._v("-")]),e._v(" sont supprimées par rapport à la version précédemment enregistrée).")]),e._v(" "),t("p",[e._v("Pour voir uniquement les modifications d'un ou plusieurs fichiers, utiliser "),t("code",[e._v("git diff nomDuFichier nomDUnAutreFichier")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"gitignore-ne-pas-versionner-des-fichiers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gitignore-ne-pas-versionner-des-fichiers"}},[e._v("#")]),e._v(" .gitignore - Ne pas versionner des fichiers")]),e._v(" "),t("p",[e._v("En vidéo :")]),e._v(" "),t("div",{staticStyle:{position:"relative","padding-bottom":"56.25%",height:"0"}},[t("iframe",{staticStyle:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"},attrs:{src:"https://www.loom.com/embed/cbf45501b82c480eb911f3d3834f0281",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:""}})]),e._v(" "),t("p",[e._v("Très souvent dans vos projets, vous ne voulez pas versionner certains fichiers (librairies externes qui sont téléchargées avec des gestionnaires de paquets (npm, composer, etc.), fichiers de cache, liés à l'IDE, etc.).\nPour cela, on peut créer/modifier un fichier "),t("code",[e._v(".gitignore")]),e._v(" à la racine du projet pour indiquer à Git les fichiers et dossiers à ignorer.")]),e._v(" "),t("div",{staticClass:"language-gitignore extra-class"},[t("pre",{pre:!0,attrs:{class:"language-gitignore"}},[t("code",[t("span",{pre:!0,attrs:{class:"token entry string"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/")]),e._v("node_modules"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/")]),e._v(" # le dossier node_modules"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/")]),e._v(" ne sera pas versionné")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token entry string"}},[e._v(".vuepress"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/")]),e._v("dist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/")]),e._v(" # Le sous-dossier dist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/")]),e._v(" du dossier .vuepress"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/")]),e._v(" est ignoré (le reste du dossier .vuepress"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/")]),e._v(" est versionné)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token entry string"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(".sublime-"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" # tous les fichiers qui contiennent .sublime- dans leur nom sont ignorés")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token entry string"}},[e._v(".idea"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/")]),e._v(" # Si vous utilisez PhpStorm, je vous recommande d'ignorer ce dossier également")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token entry string"}},[e._v(".vscode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/")]),e._v(" # Si vous utilisez Visual Studio, je vous recommande d'ignorer ce dossier également")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token entry string"}},[e._v("test.md # Le fichier test.md sera ignoré")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token entry string"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("**")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(".cache # les fichiers terminant par .cache seront ignorés (dans les sous-dossiers, quel que soit leur niveau)")]),e._v(" \n")])])]),t("h2",{attrs:{id:"add-preparer-un-commit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#add-preparer-un-commit"}},[e._v("#")]),e._v(" Add - Préparer un commit")]),e._v(" "),t("p",[e._v("En vidéo :")]),e._v(" "),t("div",{staticStyle:{position:"relative","padding-bottom":"56.25%",height:"0"}},[t("iframe",{staticStyle:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"},attrs:{src:"https://www.loom.com/embed/3067a76b00c6455daa22a7dc2fc3c132",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:""}})]),e._v(" "),t("p",[t("code",[e._v("git add")]),e._v(" permet d'ajouter des modifications à l'index. L'idée de cette commande est de préparer la création d'un commit (version signée contenant un ensemble cohérent de modifications) et de dire à Git quelles modifications nous allons vouloir valider par la suite.")]),e._v(" "),t("p",[e._v("Quelques usages courants :")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("git add .")]),e._v(" ajoute à l'index toutes les modifications, ainsi que les nouveaux fichiers et les fichiers supprimés")]),e._v(" "),t("li",[t("code",[e._v("git add nomDuFichier nomDUnAutreFichier")]),e._v(" ajoute uniquement à l'index les modifications des fichiers "),t("code",[e._v("nomDuFichier")]),e._v(" et "),t("code",[e._v("nomDUnAutreFichier")])]),e._v(" "),t("li",[t("code",[e._v("git add -p")]),e._v(" ouvre un mode interactif permettant de choisir quelles modifications ajouter à l'index dans vos fichiers "),t("strong",[e._v("modifiés")]),e._v(" (n'affiche pas les nouveaux fichiers ou les fichiers supprimés).")])]),e._v(" "),t("h2",{attrs:{id:"reset-sortir-des-elements-de-l-index"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reset-sortir-des-elements-de-l-index"}},[e._v("#")]),e._v(" Reset - Sortir des éléments de l'index")]),e._v(" "),t("p",[e._v("Si vous avez ajouté des fichiers à l'index, avec "),t("code",[e._v("git add")]),e._v(", mais que vous voulez les sortir de l'index, la commande "),t("code",[e._v("git reset")]),e._v(" permet de revenir en arrière.")]),e._v(" "),t("p",[e._v("Quelques usages courants :")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("git reset")]),e._v(" pour sortir "),t("strong",[e._v("tous")]),e._v(" les fichiers de l'index (vous conservez les modifications)")]),e._v(" "),t("li",[t("code",[e._v("git reset nomDuFichier")]),e._v(" pour sortir "),t("strong",[e._v("uniquement")]),e._v(" le fichier "),t("code",[e._v("nomDuFichier")]),e._v(" de l'index (vous conservez les modifications)")]),e._v(" "),t("li",[t("code",[e._v("git reset --hard")]),e._v(" pour sortir "),t("strong",[e._v("tous")]),e._v(" les fichiers de l'index "),t("strong",[e._v("et supprimer toutes les modifications")])]),e._v(" "),t("li",[t("code",[e._v("git reset --hard nomDuFichier")]),e._v(" pour sortir "),t("strong",[e._v("uniquement")]),e._v(" le fichier "),t("code",[e._v("nomDuFichier")]),e._v(" de l'index "),t("strong",[e._v("et supprimer toutes les modifications de ce fichier")])])]),e._v(" "),t("h2",{attrs:{id:"commit-valider-des-modifications"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#commit-valider-des-modifications"}},[e._v("#")]),e._v(" Commit - Valider des modifications")]),e._v(" "),t("p",[e._v("En vidéo :")]),e._v(" "),t("div",{staticStyle:{position:"relative","padding-bottom":"56.25%",height:"0"}},[t("iframe",{staticStyle:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"},attrs:{src:"https://www.loom.com/embed/dfec002e50714c2d8007e67670b9ca51",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:""}})]),e._v(" "),t("p",[t("code",[e._v("git commit")]),e._v(" enregistre les modifications de l'index et leur associe un auteur (avec un nom et un email) et un message (obligatoire). On peut dire que "),t("code",[e._v("git commit")]),e._v(" créer une nouvelle version ou valide les modifications.")]),e._v(" "),t("p",[e._v("Quelques usages courants :")]),e._v(" "),t("ul",[t("li",[t("code",[e._v('git commit -m "Votre message de commit"')]),e._v(" vous permet de créer un commit et d'y associer directement un message")]),e._v(" "),t("li",[t("code",[e._v("git commit")]),e._v(" vous permet de créer un commit et ouvre l'éditeur de texte par défaut pour entrer un message")])]),e._v(" "),t("p",[e._v("⚠️ Dans tous les cas, si vous laissez un message vide, le commit ne sera pas enregistré.")]),e._v(" "),t("h2",{attrs:{id:"log-voir-l-historique-des-commits"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#log-voir-l-historique-des-commits"}},[e._v("#")]),e._v(" Log - Voir l'historique des commits")]),e._v(" "),t("p",[e._v("En vidéo :")]),e._v(" "),t("div",{staticStyle:{position:"relative","padding-bottom":"56.25%",height:"0"}},[t("iframe",{staticStyle:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"},attrs:{src:"https://www.loom.com/embed/a39d82c5d5f84b0e8df96af56d3f9ad7",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:""}})]),e._v(" "),t("p",[e._v("Pour voir l'historique des commits, avec leurs auteurs, les dates, etc. on utilise la commande "),t("code",[e._v("git log")]),e._v(".")]),e._v(" "),t("p",[e._v("Quelques usages courants :")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("git log")]),e._v(" affiche toutes les informations des commits, sous forme de liste (un peu rude à lire parfois)")]),e._v(" "),t("li",[t("code",[e._v("git log --graph")]),e._v(" les affiche sous forme d'arbre (très pratique lorsque votre dépôt a des branches)")])]),e._v(" "),t("h2",{attrs:{id:"stash-remiser-des-modifications"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stash-remiser-des-modifications"}},[e._v("#")]),e._v(" Stash - Remiser des modifications")]),e._v(" "),t("p",[e._v("En vidéo :")]),e._v(" "),t("div",{staticStyle:{position:"relative","padding-bottom":"56.25%",height:"0"}},[t("iframe",{staticStyle:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"},attrs:{src:"https://www.loom.com/embed/e29607cf9a0741058e526192214573aa",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:""}})]),e._v(" "),t("p",[e._v("Il se peut que, pour une raison ou une autre, vous ayez besoin de mettre des modifications de côté (changement de ticket, une fonctionnalité à décaler / annuler, etc.). Les stash, ou remisages, permettent de revenir au commit précédent et faire disparaitre les modifications en cours sur vos fichiers, en les sauvegardant ailleurs.")]),e._v(" "),t("p",[e._v("Quelques usages courants :")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("git stash")]),e._v(" pour mettre de côté toutes les modifications en cours (⚠️ ne remise pas les nouveaux fichiers, "),t("code",[e._v("git stash -u")]),e._v(" permet de le faire)")]),e._v(" "),t("li",[t("code",[e._v("git stash pop")]),e._v(" pour appliquer les modifications du dernier stash enregistré et le "),t("strong",[e._v("supprimer")]),e._v(" du remisage")]),e._v(" "),t("li",[t("code",[e._v("git stash apply")]),e._v(" pour appliquer les modifications du dernier stash enregistré et le "),t("strong",[e._v("conserver")]),e._v(" dans le remisage")])]),e._v(" "),t("p",[e._v("Quelques usages moins courants (avec plusieurs stashes) :")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("git stash list")]),e._v(" pour afficher la liste des stashes")]),e._v(" "),t("li",[t("code",[e._v('git stash save "Un message pour se souvenir"')]),e._v(" pour créer un stash avec un message associé. Très pratique pour se rappeler du but ou du contexte de ce stash")]),e._v(" "),t("li",[t("code",[e._v("git stash pop stash@{1}")]),e._v(" pop le stash avec l'identifiant 1 (voir le retour de "),t("code",[e._v("git stash list")]),e._v(")")]),e._v(" "),t("li",[t("code",[e._v("git stash show")]),e._v(" pour afficher le contenu du stash ("),t("code",[e._v("git stash show -p")]),e._v(" pour voir le diff)")]),e._v(" "),t("li",[t("code",[e._v("git stash drop stash@{1}")]),e._v(" supprime le stash avec l'identifiant 1 (⚠️ ces modifications sont perdues)")]),e._v(" "),t("li",[t("code",[e._v("git stash clear")]),e._v(" supprime "),t("strong",[e._v("tous")]),e._v(" les stashes")])])])}),[],!1,null,null,null);s.default=r.exports}}]);